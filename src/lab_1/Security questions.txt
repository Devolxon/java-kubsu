               1) Объясните основное назначение метода main().


Является отправной точкой выполнения программы. JVM начинает выполнение кода именно с этого метода.
Принимает массив строк (String[] args), содержащий параметры, переданные через командную строку при запуске программы.
Вызов других методов, создание объектов и управление логикой программы начинается с метода main().
Используется для запуска начальных операций, таких как настройка окружения или инициализация глобальных переменных.
Формат метода фиксирован:
(пример : public static void main(String[] args) ..)
    public: Доступен JVM из любого места.
    static: Позволяет JVM вызывать метод без создания объекта класса.
    void: Метод не возвращает значения.
    String[] args: Аргументы командной строки для настройки программы.


              2)Входной параметр метода main() — это массив строк String[] args. Его назначение и особенности:


Назначение String[] args - Передача данных из командной строки: Этот параметр используется для передачи данных в программу при её запуске.
Эти данные могут быть использованы внутри программы для настройки поведения.
Массив строк: Параметр args представляет собой массив строк. Каждый элемент массива — это отдельный аргумент, переданный через командную строку
Отсутствие аргументов:
Если аргументы не передаются, то args будет пустым массивом (args.length == 0), но не null.

Особенности - обработка данных:
Все переданные параметры интерпретируются как строки. Их можно преобразовать в другие типы, если требуется:
int number = Integer.parseInt(args[0]); // Преобразование первого аргумента в число
Длина массива:
Количество переданных аргументов равно args.length == (значение)


               3) Разница между JDK и JRE:


JDK (Java Development Kit)
    Это набор инструментов для разработки приложений на Java.
    Основное назначение: создание, компиляция и отладка Java-программ.
    Состав JDK:
         JRE (включает среду выполнения Java-программ).
         Компилятор javac для преобразования исходного кода (.java) в байт-код (.class).
         Инструменты для разработки: отладчики, профилировщики и инструменты мониторинга.
         Java-документация (Javadoc) и другие утилиты.
Использование JDK:
    Нужен разработчикам для написания, компиляции и тестирования Java-программ.

JRE (Java Runtime Environment)
     Это среда, необходимая для выполнения Java-программ.
     Основное назначение: запуск уже скомпилированных Java-программ.
     Состав JRE:
         JVM (Java Virtual Machine), которая исполняет байт-код.
         Библиотеки классов Java (стандартные API).
         Инструменты для управления средой выполнения.
Использование JRE:
     Нужен пользователям, которые только запускают Java-программы, без необходимости их компиляции.


                4) какое свойство массива возвращает его размер?


В Java размер массива (количество элементов в нём) возвращается через свойство length.
Основные моменты:
   Синтаксис- имяМассива.length
   Тип возвращаемого значения: возвращает целое число типа int.

Пример:
       public class Main {
       public static void main(String[] args) {
       int[] numbers = {1, 2, 3, 4, 5};
       System.out.println("Размер массива: " + numbers.length);
           }
       }
       Вывод: Размер массива: 5
       Отличие от строк (String): Для строк используется метод .length():
       String text = "Hello";
       System.out.println("Длина строки: " + text.length());

Итог: Для массивов используется свойство .length, а для строк — метод .length()


                  5)В чем отличие конструкций System.out.println() и System.out.print()?


System.out.println():Выводит текст с переходом на новую строку.После вызова этого метода курсор перемещается на следующую строку в консоли.

Пример:

System.out.println("Привет");
System.out.println("Мир");
Вывод:
     Привет
     Мир

System.out.print(): Выводит текст без перехода на новую строку. Курсор остаётся на той же строке, что позволяет продолжать вывод на той же строке.

Пример:

System.out.print("Привет");
System.out.print(" Мир");
Вывод: Привет Мир


                     6) Каким образом осуществляется конкатенация строк в Java?


В Java конкатенация строк осуществляется несколькими способами. Она позволяет объединять строки друг с другом или с другими типами данных.
Способы конкатенации строк в Java

Оператор +
Основной способ объединения строк. Если один из операндов является строкой, остальные значения автоматически преобразуются в строки.
Пример:

    String str1 = "Hello";
    String str2 = "World";
    String result = str1 + " " + str2;
    System.out.println(result); // Вывод: Hello World

Метод concat()
Метод класса String, используется для объединения двух строк. Работает только со строками и не преобразует другие типы данных.
Пример:

    String str1 = "Hello";
    String str2 = "World";
    String result = str1.concat(" ").concat(str2);
    System.out.println(result); // Вывод: Hello World

Класс StringBuilder или StringBuffer
Более эффективный способ объединения строк, особенно в циклах или при множественной конкатенации. Строки в Java неизменяемы, поэтому StringBuilder позволяет экономить память.
Пример:

    StringBuilder sb = new StringBuilder("Hello");
    sb.append(" ").append("World");
    System.out.println(sb.toString()); // Вывод: Hello World

Метод String.join() (начиная с Java 8)
Объединяет строки с указанным разделителем. Удобен для объединения большого количества строк.
Пример:

    String result = String.join(" ", "Hello", "World");
    System.out.println(result); // Вывод: Hello World

Метод String.format()
Позволяет объединять строки с использованием шаблонов форматирования. Удобен для работы со сложными строками, где нужно подставлять значения.
Пример:

    String name = "Alice";
    int age = 25;
    String result = String.format("Name: %s, Age: %d", name, age);
    System.out.println(result); // Вывод: Name: Alice, Age: 25

Итог:
Для простых случаев удобно использовать оператор +.
Для сложных операций или работы в циклах лучше использовать StringBuilder для оптимизации производительности.


                          7)Что означает ключевое слово void?

Ключевое слово `void` в Java указывает, что метод не возвращает никакого значения.
Методы с модификатором `void` выполняют определенные действия, но не возвращают результат.

Пример: public void printMessage() {
            System.out.println("Hello, world!");
        }

В данном примере метод `printMessage()` выполняет вывод текста на консоль, но ничего не возвращает.


                           8)Что означает ключевое слово static?

Ключевое слово `static` используется для обозначения, что метод или переменная принадлежат самому классу, а не объекту этого класса. Это значит, что доступ к ним можно получить без создания экземпляра класса.

Основные особенности:
- Статический метод может быть вызван с использованием имени класса: `ClassName.methodName()`.
- Статическая переменная сохраняет свое состояние между вызовами.
- Статические методы не могут напрямую обращаться к нестатическим методам и переменным.

Пример:
public class MathUtils {
    public static int add(int a, int b) {
        return a + b;
    }
}
Вызов:
```java
int sum = MathUtils.add(5, 3);
System.out.println(sum); // Вывод: 8
